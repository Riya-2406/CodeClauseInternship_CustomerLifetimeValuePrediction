# -*- coding: utf-8 -*-
"""Customer_lifetime_value_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ykFHnXXGOnpKSAEdZBcOVep3hADS35Ai
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler, LabelEncoder

# Load the dataset
df = pd.read_csv('customer_data.csv')

# Preprocess the data
df['purchase_date'] = pd.to_datetime(df['purchase_date'])
df['customer_age'] = df['customer_age'].fillna(df['customer_age'].mean())

# Extract features
X = df.drop(['customer_id', 'lifetime_value', 'purchase_date'], axis=1)
y = df['lifetime_value']

# Encode the location column
le = LabelEncoder()
X['location'] = le.fit_transform(X['location'])

# Split the data into numerical and categorical columns
X_num = X.select_dtypes(include=['int64', 'float64'])
X_cat = X.select_dtypes(include=['object'])

# Scale the numerical columns
scaler = StandardScaler()
X_num_scaled = scaler.fit_transform(X_num)

# Concatenate the scaled numerical columns and the categorical columns
X_scaled = pd.concat([pd.DataFrame(X_num_scaled, columns=X_num.columns), X_cat], axis=1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train a Random Forest Regressor model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = rf_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'MSE: {mse:.2f}')
print(f'R2: {r2:.2f}')

# Use the model to predict the lifetime value of new customers
new_customer_data = pd.DataFrame({'purchase_frequency': [3], 'average_order_value': [100], 'customer_age': [35], 'location': ['urban']})
new_customer_data['location'] = le.transform(new_customer_data['location'])
new_customer_data_num = new_customer_data.select_dtypes(include=['int64', 'float64'])
new_customer_data_cat = new_customer_data.select_dtypes(include=['object'])
new_customer_data_num_scaled = scaler.transform(new_customer_data_num)
new_customer_data_scaled = pd.concat([pd.DataFrame(new_customer_data_num_scaled, columns=new_customer_data_num.columns), new_customer_data_cat], axis=1)
predicted_ltv = rf_model.predict(new_customer_data_scaled)
print(f'Predicted Lifetime Value: {predicted_ltv[0]:.2f}')

